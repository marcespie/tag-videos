#! /usr/bin/perl

# Copyright (c) 2024 Marc Espie <espie@openbsd.org>
# 
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
# 
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

use v5.36;
use FindBin;
use Getopt::Std;
use lib "$FindBin::Bin/lib";
use TagVideos::Base;
use locale;

my $opts = {};

if (!getopts('d:D:', $opts) || (@ARGV == 0 && !$opts->{D})) {
	TagVideos::Base->usage("[-d database] [-D descr] [!]tag ...");
}

my $db = TagVideos::Base->connect($opts->{d}, {ReadOnly => 1});

my $query = qq{
	select distinct path from file 
		join filetag on filetag.fileid=file.id};
my $subquery = qq{
	select fileid from filetag 
		join tag on tag.id=filetag.tagid};

my $test = $db->prepare(qq{
	select distinct 1 from filetag
		join tag on tag.id=filetag.tagid
		where tag=?});
my @extra;
for my $i (@ARGV) {
	my $not = '';
	if ($i =~ s/^!//) {
		$not = 'not';
	}
	$test->execute($i);
	my $s1;
	if ($test->fetch) {
		$s1 = "$subquery where tag=?";
	} else {
		$s1 = "$subquery where tag like '%'||?||'%'";
	}
	push(@extra, "fileid $not in ($s1)");
}

if ($opts->{D}) {
	my $i = $opts->{D};
	my $not = '';
	if ($i =~ s/^!//) {
		$not = 'not';
	}
	push(@ARGV, $i);
	my $s1 = "select fileid from descr where descr like '%'||?||'%'";
	push(@extra, "fileid $not in ($s1)");
}

my $fullquery = "$query where ".join(" and ", @extra)." order by path";
my $stmt = $db->prepare($fullquery);

my $path;
$stmt->execute(@ARGV);
$stmt->bind_columns(\$path);

while ($stmt->fetch) {
	say($path);
}
