#! /usr/bin/perl

use v5.36;

use Term::ReadLine;
use Data::Dumper;
use DBI;
use File::Spec;
use FindBin;

my $dbpath = "$FindBin::Bin/mydb";

# as it the script gets two parameters: cwd + path name

die "bad number of parameters" if @ARGV < 2;
my $path = File::Spec->rel2abs($ARGV[1], $ARGV[0]);

say "Filename is: $path";

my $db = DBI->connect("dbi:SQLite:dbname=$dbpath", "", "");

my $fh = $db->prepare("insert into file (path) values (?)");
my $stmt = $db->prepare("select tag from tag order by tag");
my $findid = $db->prepare("select id from file where path=?");
my $findtags = $db->prepare(
    "select tag.tag from tag 
	join filetag on tagid=tag.id
	join file on fileid = file.id
	where fileid = ? order by tag.tag");

my $createtag = $db->prepare("insert into tag (tag) values (?)");

my $inserttag = $db->prepare("insert into filetag (fileid, tagid)
	values (?, (select id from tag where tag=?))");

my $deletetag = $db->prepare("delete from filetag where fileid=?
	and tagid=(select id from tag where tag=?)");

my $suggest = $db->prepare("select distinct(tag.tag) from tag
	join filetag on filetag.tagid=tag.id
	join filetag t1 on t1.fileid=filetag.fileid
	join tag t2 on t2.id=t1.tagid
	where t2.tag=? order by tag.tag");
# First we insert the path into the db.
$fh->execute($path);

# Then we get the id

my $id;
$findid->bind_columns(\$id);
$findid->execute($path);
while ($findid->fetch) {
}

my $term = Term::ReadLine->new("tag-videos");
my $attribs = $term->Attribs;
$attribs->{completion_entry_function} = $attribs->{list_completion_function};

sub list_tags
{
	# and the list of tags
	my $tags = $db->selectcol_arrayref($findtags, {}, $id);

	say "Tags: ", join(' ', @$tags);
}

sub prepare_completions
{
	$attribs->{completion_word} = 
		$db->selectcol_arrayref($stmt);
}


list_tags();
prepare_completions();


while (defined ($_ = $term->readline('>'))) {
	if (m/^(?:add|t)\s+(.*)/i) {
		for my $tag (split /\s+/, $1) {
			$tag = lc($tag);
			# create the tag and add it
			$createtag->execute($tag);
			$inserttag->execute($id, $tag);
		}
	} elsif (m/^rm\s+(.*)/) {
		for my $tag (split /\s+/, $1) {
			$tag = lc($tag);
			# create the tag and remove it
			$deletetag->execute($id, $tag);
		}
	} elsif (m/^suggest\s+(.*)/) {
		for my $tag (split /\s+/, $1) {
			$tag = lc($tag);
			my $tags = $db->selectcol_arrayref($suggest, {}, $tag);
			say "Suggestions: ", join(' ', @$tags);
		}
	} elsif (m/^list\s*$/) {
		list_tags();
	} elsif (m/^known\s*$/) {
		prepare_completions();
		say "known tags: ", join(' ', @{$attribs->{completion_word}});
	} elsif (m/^help\s*/) {
		say "help/add/t/rm/list/suggest/known/quit"
	} elsif (m/^quit\s*$/) {
		last;
	} else {
		say "Unknown command $_\n"
	}
}
