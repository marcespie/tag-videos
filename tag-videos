#! /usr/bin/perl

# Copyright (c) 2024 Marc Espie <espie@openbsd.org>
# 
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
# 
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

use v5.36;

# XXX this actually expects Gnu Readline for tab completion to work
use Term::ReadLine;
use Data::Dumper;
use File::Spec;
use FindBin;
use lib "$FindBin::Bin/lib";
use TagVideos::Model;

# as it stands the script gets two parameters: cwd + path name

die "bad number of parameters" if @ARGV != 2 and @ARGV != 3;
my $path = File::Spec->rel2abs($ARGV[1], $ARGV[0]);

say "Filename is: $path";

my $db = TagVideos::Model->connect($ARGV[2]);
$db->set_path($path);

my $term = Term::ReadLine->new("tag-videos");
my $attribs = $term->Attribs;
$attribs->{completion_entry_function} = $attribs->{list_completion_function};

sub list_tags
{
	my $tags = $db->find_tags;

	say "Tags: ", join(' ', @$tags);
}

sub prepare_completions
{
	$attribs->{completion_word} = 
		$db->selectcol_arrayref('alltags');
}

sub parse_tags($words, $f)
{
	for my $tag (split /\s+/, lc($words)) {
		&$f($tag);
	}
}


list_tags();
prepare_completions();

while (defined ($_ = $term->readline('> '))) {
	if (m/^(?:add|t)\s+(.*)/i) {
		parse_tags($1, 
		    sub($tag) {
			$db->create_tag($tag);
		    });
	} elsif (m/^rm\s+(.*)/i) {
		parse_tags($1, 
		    sub($tag) {
			$db->delete_tag($tag);
		    });
	} elsif (m/^suggest\s+(.*)/i) {
		parse_tags($1,
		    sub($tag) {
			my $tags = $db->suggestions($tag);
			say "Suggestions: ", join(' ', @$tags);
		    });
	} elsif (m/^list\s*$/i) {
		list_tags();
	} elsif (m/^known\s*(.*)$/) {
		my $filter = $1;
		prepare_completions();
		my @tags = @{$attribs->{completion_word}};
		if ($filter ne '') {
			@tags = grep { /\Q$filter\E/ } @tags;
		}
		say "known tags: ", join(' ', @tags);
	} elsif (m/^help\s*/i) {
		say "help/add/t/rm/list/suggest/known/quit"
	} elsif (m/^(?:quit|q)\s*$/i) {
		$db->cleanup;
		exit;
	} elsif (m/^\s*$/) {
		# nothing !
	} else {
		say "Unknown command $_";
	}
}
