#! /usr/bin/perl

# Copyright (c) 2024 Marc Espie <espie@openbsd.org>
# 
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
# 
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

use v5.36;

# XXX this actually expects Gnu Readline for tab completion to work
use Term::ReadLine;
use Data::Dumper;
use FindBin;
use Getopt::Std;
use File::Spec;
use File::Temp;
use lib "$FindBin::Bin/lib";
use TagVideos::Model;
use TagVideos::Path;

use locale;
my $opts = {};

if (!getopts('qc:d:LH:', $opts) || @ARGV != 1) {
	say STDERR "Usage: $0 [-Lq] [-c cwd] [-d database] [-H history] path";
	exit 1;
}

# as it stands the script gets two parameters: cwd + path name

my $path = File::Spec->rel2abs($ARGV[0], $opts->{c});

if (!$opts->{L}) {
	$path = TagVideos::Path->resolve_link($path);
}

say "Filename is: $path";

my $db = TagVideos::Model->connect($opts->{d});
$db->set_path($path);

my $term = Term::ReadLine->new("tag-videos");
my $attribs = $term->Attribs;
$attribs->{completion_entry_function} = $attribs->{list_completion_function};

my $history = $opts->{h} // $ENV{HOME}."/.tag-videos-history";

if (-f $history) {
	$term->ReadHistory($history);
}

sub list_tags($quit = 0)
{
	my $tags = $db->find_tags;

	say "Tags: ", join(' ', @$tags);
	if ($quit && @$tags >0) {
		exit 0;
	}
}

sub prepare_completions()
{
	$attribs->{completion_word} = 
		$db->selectcol_arrayref('alltags');
}

sub parse_tags($words, $f)
{
	for my $tag (split /\s+/, lc($words)) {
		&$f($tag);
	}
}

sub pretty_print_suggestions($h)
{
	my @l;
	for my $k (sort {
		$h->{$a} != $h->{$b} ?
		$h->{$b} <=> $h->{$a} : $a cmp $b } keys %$h) {
		push(@l, "$k($h->{$k})");
	}
	return @l;
}

sub edit_description()
{
	my $fh = File::Temp->new(
		UNLINK => 0, 
		TEMPLATE => "/tmp/edit.XXXXXXXXXXX"
	    );
	my $tempname = $fh->filename;
	my $descr = $db->read_descr;
	if (defined $descr) {
		print $fh $descr;
	}
	close $fh;
	my $editor = $ENV{VISUAL} // $ENV{EDIT} // "vi";
	system("$editor $tempname");
	open(my $fh2, "<", $tempname) or die;
	local $/;
	undef $/;
	$descr = <$fh2>;
	close $fh2;
	$db->set_descr($descr);
	unlink($tempname);
}


my $descr = $db->read_descr;
if (defined $descr) {
	say "Descr:";
	say $descr;
}

list_tags($opts->{q});
prepare_completions();

while (defined ($_ = $term->readline('> '))) {
	if (m/^\!?tag\s.*\sIF\s.*/) {
		$db->parse_rule($_);
	} elsif (m/^\!?rename\b/) {
		$db->parse_rule($_);
		prepare_completions();
	} elsif (m/^(?:add|t|tag)\b\s*(.*)/i) {
		parse_tags($1, 
		    sub($tag) {
			$db->create_tag($tag);
		    });
		prepare_completions();
	} elsif (m/^rm\b\s*(.*)/i) {
		parse_tags($1, 
		    sub($tag) {
			$db->delete_tag($tag);
		    });
	} elsif (m/^suggest\b\s*(.*)/i) {
		parse_tags($1,
		    sub($tag) {
			my $tags = $db->suggestions($tag);
			say "Suggestions: ", 
			    join(' ', pretty_print_suggestions($tags));
		    });
	} elsif (m/^list\s*$/i) {
		list_tags();
	} elsif (m/^known\b\s*(.*)$/) {
		my $filter = $1;
		prepare_completions();
		my @tags = @{$attribs->{completion_word}};
		if ($filter ne '') {
			@tags = grep { /\Q$filter\E/ } @tags;
		}
		say "known tags: ", join(' ', @tags);
	} elsif (m/^help\s*/i) {
		say "help/add/t/rm/rename/list/suggest/showrules/rmrules/descr/known/quit"
	} elsif (m/^(?:quit|q)\s*$/i) {
		$db->cleanup;
		$term->WriteHistory($history);
		exit;
	} elsif (m/^descr\s*/i) {
		edit_description();
	} elsif (m/^showrules\s*/i) {
		$db->show_rules();
	} elsif (m/^rmrule\s+(.*)$/i) {
		$db->delete_rule($1);
	} elsif (m/^\s*$/) {
		# nothing !
	} else {
		say "Unknown command $_";
	}
}
